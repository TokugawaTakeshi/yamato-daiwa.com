/*
 * @yamato-daiwa/frontend v1.0
 * (c) 2021 Sole proprietorship "Yamato Daiwa" Takeshi Tokugawa
 * Released under the MIT License.
 */
a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video {
  border: 0;
  font-size: 100%;
  margin: 0;
  padding: 0;
  vertical-align: baseline;
}
article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section {
  display: block;
}
h1,h2,h3,h4,h5,h6 {
  font-weight: 400;
}
body {
  line-height: 1;
}
ol,ul {
  list-style: none;
}
a {
  color: #000;
  outline: none;
  text-decoration: none;
}
blockquote,q {
  quotes: none;
}
blockquote:after,blockquote:before,q:after,q:before {
  content: "";
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
th {
  font-weight: 400;
}
button:focus,input:focus,select:focus,textarea:focus {
  outline: none;
}
input {
  box-shadow: none;
}
hr {
  border-width: 0;
  margin: 0;
}
* {
  box-sizing: border-box;
}
body,html {
  height: 100%;
}
html {
  font-family: system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,Liberation Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
  font-size: 14px;
  line-height: 1;
}
sub {
  vertical-align: sub;
}
sub,sup {
  font-size: 10px;
  margin-left: 1px;
}
sup {
  vertical-align: super;
}
.Heading2 {
  color: #606060;
  font-size: 32px;
  line-height: 1.2;
  word-break: break-all;
}
.Heading2:before {
  content: "";
  display: block;
  margin-top: -3.2px;
}
.Heading2:after {
  content: "";
  display: block;
  margin-bottom: -3.2px;
}
.Heading1+.Heading2 {
  margin-top: 16px;
}
.Heading3 {
  color: #787878;
  font-size: 26px;
  line-height: 1.2;
  word-break: break-all;
}
.Heading3:before {
  content: "";
  display: block;
  margin-top: -2.6px;
}
.Heading3:after {
  content: "";
  display: block;
  margin-bottom: -2.6px;
}
.Heading2+.Heading3 {
  margin-top: 12px;
}
.Heading6 {
  color: #989898;
  font-size: 16px;
  line-height: 1.2;
  word-break: break-all;
}
.Heading6:before {
  content: "";
  display: block;
  margin-top: -1.6px;
}
.Heading6:after {
  content: "";
  display: block;
  margin-bottom: -1.6px;
}
.Heading5+.Heading6 {
  margin-top: 6px;
}
.Link {
  background-image: linear-gradient(rgba(0,62,255,.5), rgba(0,62,255,.5));
  background-position: bottom 0 center;
  background-repeat: no-repeat;
  background-size: 100% 1px;
  color: #003eff;
  cursor: pointer;
  display: inline-block;
  line-height: 1;
  padding-bottom: 2px;
}
.Link:focus,.Link:hover {
  background-image: linear-gradient(rgba(0,127,255,.75), rgba(0,127,255,.75));
  color: #007fff;
}
.Link:focus {
  outline: none;
}
.Link:active {
  background-image: linear-gradient(#777620, #777620);
  color: #777620;
}
.Link.Link__DisabledState {
  background-image: linear-gradient(rgba(0,127,255,.5), rgba(0,127,255,.5));
  color: #007fff;
}
.TopPage {
  font-family: Meiryo UI,sans-serif;
  height: 100%;
  margin-left: auto;
  margin-right: auto;
  max-height: 100%;
  max-width: 960px;
  min-width: 320px;
  overflow-y: auto;
  width: 100%;
}
.TopPage-HeroImage {
  background-repeat: no-repeat;
  background-size: cover;
}
@media (min-width:500px) {
  .TopPage-HeroImage {
    aspect-ratio: 19/6;
    background-image: url(Top/Images/HeroImage-WideScreens.png);
  }
}
@media (max-width:499px) {
  .TopPage-HeroImage {
    aspect-ratio: 4/3;
    background-image: url(Top/Images/HeroImage-NarrowScreens.png);
  }
}
.TopPage-BusinessCard {
  margin-top: 8px;
  padding-left: 12px;
  padding-right: 12px;
}
.TopPage-BusinessCard-TopHeading {
  color: #e65100;
  font-size: 28px;
  font-weight: 700;
}
.TopPage-BusinessCard-Slogan {
  color: #f57c00;
  font-size: 18px;
  font-weight: 700;
  line-height: 22px;
  margin-top: 6px;
  word-break: break-all;
}
.TopPage-BusinessCard-Slogan:before {
  content: "";
  display: block;
  margin-top: -2px;
}
.TopPage-BusinessCard-Slogan:after {
  content: "";
  display: block;
  margin-bottom: -2px;
}
.TopPage-BusinessCard-Metadata {
  grid-gap: 8px;
  display: grid;
  grid-template-columns: auto minmax(0, 1fr);
  margin-top: 12px;
}
.TopPage-BusinessCard-Metadata dt {
  color: #404040;
  font-weight: 700;
  text-align: right;
}
.TopPage-BusinessCard-Metadata dd {
  color: #606060;
  font-size: 14px;
  line-height: 18px;
  word-break: break-all;
}
.TopPage-BusinessCard-Metadata dd:before {
  content: "";
  display: block;
  margin-top: -2px;
}
.TopPage-BusinessCard-Metadata dd:after {
  content: "";
  display: block;
  margin-bottom: -2px;
}
.TopPage-BusinessCard-Metadata-Accent {
  color: #e65100;
  font-weight: 700;
}
.TopPage-BusinessCard-Metadata-Remark {
  color: #b0b0b0;
}
.TopPage-SupportedTechnologies {
  margin-top: 24px;
  padding-left: 12px;
  padding-right: 12px;
}
.TopPage-LanguagesTable {
  left: 50%;
  margin-top: 12px;
  position: relative;
  transform: translateX(-50%);
}
.TopPage-LanguagesTable thead th {
  color: #787878;
  font-weight: 700;
  padding-bottom: 7px;
}
.TopPage-LanguagesTable tbody th {
  color: #787878;
  font-weight: 700;
  text-orientation: upright;
  -ms-writing-mode: tb-lr;
      writing-mode: vertical-lr;
}
.TopPage-LanguagesTable tbody td {
  padding-left: 6px;
  text-align: center;
}
.TopPage-LanguagesTable-MultipleElementsFlow {
  display: flex;
  flex-wrap: wrap;
  gap: 4px 8px;
  justify-content: center;
}
.TopPage-LanguagesTable-ChevronIcon {
  fill: #606060;
  margin-bottom: 6px;
  margin-top: 10px;
  width: 36px;
}
.TopPage-TechnologyLogoWithCaption {
  align-items: center;
  display: inline-flex;
  flex-direction: column;
  row-gap: 6px;
}
.TopPage-TechnologyLogoWithCaption-Logo {
  height: 64px;
}
.TopPage-TechnologyLogoWithCaption-Caption {
  color: #505050;
  font-size: 14px;
  font-weight: 700;
  line-height: 18px;
  text-align: center;
  word-break: break-all;
}
.TopPage-TechnologyLogoWithCaption-Caption:before {
  content: "";
  display: block;
  margin-top: -2px;
}
.TopPage-TechnologyLogoWithCaption-Caption:after {
  content: "";
  display: block;
  margin-bottom: -2px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
